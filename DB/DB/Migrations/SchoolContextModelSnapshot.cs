// <auto-generated />
using System;
using DB.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB.Migrations
{
    [DbContext(typeof(SchoolContext))]
    partial class SchoolContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DB.Models.Application", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CareNeeds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Comments")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime>("ProcessedDate")
                        .HasColumnType("DATE");

                    b.Property<int?>("ResidentId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("DATE");

                    b.HasKey("ApplicationID");

                    b.HasIndex("ResidentId");

                    b.HasIndex("RoomID");

                    b.ToTable("APPLICATION");
                });

            modelBuilder.Entity("DB.Models.Care", b =>
                {
                    b.Property<int>("CareID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("DATE");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("DATE");

                    b.Property<int?>("ResidentId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomID")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfCare")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CareID");

                    b.HasIndex("ResidentId");

                    b.HasIndex("RoomID");

                    b.ToTable("CARE");
                });

            modelBuilder.Entity("DB.Models.CareManager", b =>
                {
                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<decimal>("Bonus")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("StaffID");

                    b.ToTable("CARE_MANAGER");
                });

            modelBuilder.Entity("DB.Models.ExternalStaff", b =>
                {
                    b.Property<int>("ExternalStaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("HourlyRate")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TradeLicenceNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TypeOfTrade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ExternalStaffID");

                    b.ToTable("EXTERNAL_STAFF");
                });

            modelBuilder.Entity("DB.Models.Nurse", b =>
                {
                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<int>("CareManagerID")
                        .HasColumnType("int");

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpecializedIn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("StaffID");

                    b.HasIndex("CareManagerID");

                    b.ToTable("NURSE");
                });

            modelBuilder.Entity("DB.Models.PersonalCarer", b =>
                {
                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<int>("CareManagerID")
                        .HasColumnType("int");

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ShiftHours")
                        .HasColumnType("int");

                    b.HasKey("StaffID");

                    b.HasIndex("CareManagerID");

                    b.ToTable("PERSONAL_CARER");
                });

            modelBuilder.Entity("DB.Models.RepairJobs", b =>
                {
                    b.Property<int>("JobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ExternalStaffID")
                        .HasColumnType("int");

                    b.Property<string>("JobDetails")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("varchar(600)");

                    b.Property<int?>("RoomID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalRepairCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("JobID");

                    b.HasIndex("ExternalStaffID");

                    b.HasIndex("RoomID");

                    b.ToTable("REPAIR_JOB");
                });

            modelBuilder.Entity("DB.Models.Resident", b =>
                {
                    b.Property<int>("ResidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("DATE");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ResidentId");

                    b.HasIndex("FullName", "Phone");

                    b.ToTable("RESIDENT");
                });

            modelBuilder.Entity("DB.Models.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CareManagerID")
                        .HasColumnType("int");

                    b.Property<int>("DailyRental")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAvailable")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RoomPhoto")
                        .HasColumnType("longtext");

                    b.Property<string>("RoomSize")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RoomID");

                    b.HasIndex("CareManagerID");

                    b.ToTable("ROOM");
                });

            modelBuilder.Entity("DB.Models.Staff", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Salary")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("StaffType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("StaffID");

                    b.ToTable("STAFF");
                });

            modelBuilder.Entity("DB.Models.Application", b =>
                {
                    b.HasOne("DB.Models.Resident", null)
                        .WithMany("Applications")
                        .HasForeignKey("ResidentId");

                    b.HasOne("DB.Models.Room", null)
                        .WithMany("Applications")
                        .HasForeignKey("RoomID");
                });

            modelBuilder.Entity("DB.Models.Care", b =>
                {
                    b.HasOne("DB.Models.Resident", null)
                        .WithMany("Cares")
                        .HasForeignKey("ResidentId");

                    b.HasOne("DB.Models.Room", null)
                        .WithMany("Cares")
                        .HasForeignKey("RoomID");
                });

            modelBuilder.Entity("DB.Models.CareManager", b =>
                {
                    b.HasOne("DB.Models.Staff", null)
                        .WithOne()
                        .HasForeignKey("DB.Models.CareManager", "StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB.Models.Nurse", b =>
                {
                    b.HasOne("DB.Models.CareManager", null)
                        .WithMany("Nurses")
                        .HasForeignKey("CareManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Models.Staff", null)
                        .WithOne()
                        .HasForeignKey("DB.Models.Nurse", "StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB.Models.PersonalCarer", b =>
                {
                    b.HasOne("DB.Models.CareManager", null)
                        .WithMany("personalCarers")
                        .HasForeignKey("CareManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Models.Staff", null)
                        .WithOne()
                        .HasForeignKey("DB.Models.PersonalCarer", "StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB.Models.RepairJobs", b =>
                {
                    b.HasOne("DB.Models.ExternalStaff", null)
                        .WithMany("RepairJobs")
                        .HasForeignKey("ExternalStaffID");

                    b.HasOne("DB.Models.Room", null)
                        .WithMany("RepairJobs")
                        .HasForeignKey("RoomID");
                });

            modelBuilder.Entity("DB.Models.Room", b =>
                {
                    b.HasOne("DB.Models.CareManager", null)
                        .WithMany("Rooms")
                        .HasForeignKey("CareManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB.Models.CareManager", b =>
                {
                    b.Navigation("Nurses");

                    b.Navigation("Rooms");

                    b.Navigation("personalCarers");
                });

            modelBuilder.Entity("DB.Models.ExternalStaff", b =>
                {
                    b.Navigation("RepairJobs");
                });

            modelBuilder.Entity("DB.Models.Resident", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Cares");
                });

            modelBuilder.Entity("DB.Models.Room", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Cares");

                    b.Navigation("RepairJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
